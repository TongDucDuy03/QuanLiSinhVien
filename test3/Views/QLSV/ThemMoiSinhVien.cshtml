@model test3.Models.SinhVien
@{
    ViewBag.ac = 3;
}

<h2>Thêm sinh viên</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.SvUser, "Mã sinh viên", new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.MSSV, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MSSV, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SvUser, "Tài khoản", new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.SvUser, new { htmlAttributes = new { @class = "form-control", type = "email" } })
            @Html.ValidationMessageFor(model => model.SvUser, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SvPass, "Mật khẩu", new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.SvPass, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SvPass, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.HoTenSV, "Họ tên", new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.HoTenSV, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HoTenSV, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NgaySinhSV, "Ngày sinh", new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.NgaySinhSV, new { htmlAttributes = new { @class = "form-control", type = "date" } })
            @Html.ValidationMessageFor(model => model.NgaySinhSV, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.GioiTinh, "Giới tính", new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            <div>
                <input type="radio" value="True" name="gioitinh">Nam
                <input type="radio" value="False" name="gioitinh">Nữ
            </div>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.MaKhoa, "Mã khoa", new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @{
                test3.Models.QLSVEntities db = new test3.Models.QLSVEntities();
                List<test3.Models.Khoa> dsKhoa = db.Khoas.ToList();
            }

            @Html.DropDownListFor(model => model.MaKhoa, new SelectList(dsKhoa, "MaKhoa", "TenKhoa"), "Chọn khoa...", new { @class = "form-control", id = "MaKhoa" })

            
            @Html.ValidationMessageFor(model => model.MaKhoa, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.MaLop, "Mã lớp", new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @{
                List<test3.Models.Lop> dsLop = db.Lops.ToList();
            }
            @Html.DropDownListFor(model => model.MaLop, new SelectList(dsLop, "MaLop", "MaKhoa"), "Chọn lớp...", new { @class = "form-control", id = "MaLop" })

            @Html.ValidationMessageFor(model => model.MaLop, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NoiSinh, "Nơi sinh", new { @class = "control-label col-md-2" })
        <div class="col-md-3">
            @Html.EditorFor(model => model.NoiSinh, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NoiSinh, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Thêm" class="btn btn-default" />
        </div>
    </div>
    
</div>
}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Find the "Create" button by its class or other attributes
        var createButton = document.querySelector('.btn.btn-default'); // Assuming this selector uniquely identifies your "Create" button

        // Add a click event listener to the button
        createButton.addEventListener('click', function (event) {
            var usernameInput = document.getElementById('SvUser');
            var passwordInput = document.getElementById('SvPass');
            var fullNameInput = document.getElementById('HoTenSV');
            var dateOfBirthInput = document.getElementById('NgaySinhSV');
            var genderRadioButtons = document.querySelectorAll('input[name="gioitinh"]');
            var departmentSelect = document.getElementById('MaKhoa');
            var departmentSelect2 = document.getElementById('MaLop');
            var addressInput = document.getElementById('NoiSinh')

            var errorMessage = '';

            if (usernameInput.value.trim() === '') {
                errorMessage += 'Vui lòng nhập tài khoản.\n';
            }
            if (passwordInput.value.trim() === '') {
                errorMessage += 'Vui lòng nhập mật khẩu.\n';
            }
            if (fullNameInput.value.trim() === '') {
                errorMessage += 'Vui lòng nhập họ tên.\n';
            }
            var dateOfBirthValue = dateOfBirthInput.value.trim();
            if (dateOfBirthValue === '') {
                errorMessage += 'Vui lòng nhập ngày sinh.\n';
            } else {
                var dateOfBirth = new Date(dateOfBirthValue);
                if (dateOfBirth.getFullYear() >= 2006) {
                    errorMessage += 'Chưa đủ 18 tuổi.\n';
                }
            }
            if (genderRadioButtons.length === 0 || ![...genderRadioButtons].some(radio => radio.checked)) {
                errorMessage += 'Vui lòng chọn giới tính.\n';
            }
            if (departmentSelect.value === '') {
                errorMessage += 'Vui lòng chọn mã khoa.\n';
            }
            if (departmentSelect2.value === '') {
                errorMessage += 'Vui lòng chọn mã lớp.\n';
            }
            if (addressInput.value.trim() === '') {
                errorMessage += 'Vui lòng nhập nơi sinh.\n';
            }

            if (errorMessage !== '') {
                alert(errorMessage); // Display the combined error message
                event.preventDefault(); // Prevent the form from submitting
            }
        });
    });
</script>

<div>
    @Html.ActionLink("Back to List", "DanhSachSinhVien")
</div>
